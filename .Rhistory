theme(
plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12)
)
ggsave("Average Proportion Correct (Pre-Test).png", plot = avg_prop_pretest, width = 10, height = 6, dpi = 300,bg="white")
avg_prop_pretest
# Create total pre/post correctness
survey_data <- survey_data %>%
mutate(
pre_score = rowSums(across(ends_with("pre_km_code") |
ends_with("pre_survdiff_code") |
ends_with("pre_mrl_code") |
ends_with("pre_mr_ldiff_code"), ~ . == "CORRECT")),
post_score = rowSums(across(ends_with("post_km_code") |
ends_with("post_survdiff_code") |
ends_with("post_mrl_code") |
ends_with("post_mr_ldiff_code"), ~ . == "CORRECT")),
learning_gain = post_score - pre_score
)
# Filter for those with low knowledge rate (1 or 5)
low_knowledge_learners <- survey_data %>%
filter(knowledge_rate <= 5)
# Plot learning gain
knowledge_gain <- ggplot(low_knowledge_learners, aes(x = factor(knowledge_rate), y = learning_gain)) +
geom_boxplot(fill = "lightgreen") +
labs(
title = "Learning Gain for Low-Knowledge Respondents",
x = "Self-rated Knowledge (Low)",
y = "Change in Correct Answers (Post - Pre)"
) +
theme_minimal()+
theme(
plot.title = element_text(face = "bold", size = 16),
axis.title.x = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 12)
)
ggsave("Learning Gain for Low-Knowledge Respondents.png", plot = knowledge_gain, width = 10, height = 6, dpi = 300,bg="white")
knowledge_gain
# Prepare long-format data for plotting
correctness_long <- survey_data %>%
select(ends_with("code"),knowledge_rate) %>%
mutate(id = row_number()) %>%
pivot_longer(
cols = -c(id,knowledge_rate),
names_to = "plot_full",
values_to = "correctness"
) %>%
mutate(
phase = factor(
case_when(
str_detect(plot_full, "^pre_") ~ "Pre_Learning",
str_detect(plot_full, "^post_") ~ "Post_Learning"
),levels = c("Pre_Learning", "Post_Learning")
),
plot = case_when(
str_detect(plot_full, "km") ~ "Kaplan Meier",
str_detect(plot_full, "survdiff") ~ "Difference in Survival",
str_detect(plot_full, "mrl") ~ "MRL",
str_detect(plot_full, "mr_ldiff") ~ "Difference in MRL"
),
correctness = factor(correctness, levels = c("INCORRECT", "CORRECT")) # Ensure CORRECT is on the bottom
)
# stacked proportional bars, faceted by plot and phase
if (FALSE) {prop_correct_pre_vs_post <- ggplot(correctness_long, aes(x = 1, fill = correctness)) +
geom_bar(position = "fill", width = 0.5) +
facet_grid(rows = vars(plot), cols = vars(phase), switch = "y") +
scale_y_continuous(labels = scales::percent_format()) +
scale_fill_manual(values = c("CORRECT" = "#0072B2", "INCORRECT" = "#E69F00")) +
labs(
title = "Proportion of Correct vs Incorrect Interpretations(Pre vs Post)",
x = NULL,
y = "Proportion",
fill = "Answer"
) +
theme_minimal() +
theme(
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
strip.text.y.left = element_text(angle = 0, size = 12,face = "bold"),
strip.placement = "outside",
strip.text.x = element_text(size = 10,face = "bold"),
plot.title = element_text(face = "bold", size = 14),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
axis.text.y = element_text(size = 8,face = "bold"),
legend.position = "top"
)
ggsave("Proportion of Correct vs Incorrect (Pre vs Post).png", plot = prop_correct_pre_vs_post, width = 10, height = 6, dpi = 300,bg="white")
prop_correct_pre_vs_post}
# Calculate overall proportion of CORRECT per phase (ignore plot type)
overall_correct_prop <- correctness_long %>%
group_by(phase) %>%
summarise(prop_correct = mean(correctness == "CORRECT")) %>%
ungroup()
# Overall Pre vs Post plot
overall_bar_correct <- ggplot(overall_correct_prop, aes(x = phase, y = prop_correct, fill = phase)) +
geom_bar(stat = "identity", width = 0.6) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
scale_fill_manual(values = c("Pre_Learning" = "#E69F00", "Post_Learning" = "#0072B2")) +
labs(
title = "Overall Proportion of Correct Interpretations (Pre vs Post)",
x = "Phase",
y = "Proportion Correct",
fill = "Phase"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12, face = "bold"),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
legend.position = "none"
)
# Print plot
overall_bar_correct
# Calculation of  proportion of CORRECT per plot  and phase
correct_prop <- correctness_long %>%
group_by( plot, phase) %>%
summarise(prop_correct = mean(correctness == "CORRECT")) %>%
ungroup()
# Grouped bar chart
grouped_bar_correct <- ggplot(correct_prop, aes(x = plot, y = prop_correct, fill = phase)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
scale_fill_manual(values = c("Pre_Learning" = "#E69F00", "Post_Learning" = "#0072B2")) +
labs(
title = "Proportion of Correct Interpretations (Pre vs Post Learning) by plot",
x = "Plot",
y = "Proportion Correct",
fill = "Phase"
) +
theme_minimal() +
theme(
axis.text.x = element_text(size = 12, face = "bold", angle = 20, hjust = 1),
axis.text.y = element_text(size = 10, face = "bold"),
axis.title.x = element_text(size = 14, face = "bold"),
axis.title.y = element_text(size = 14, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
legend.position = "top"
)
# Print plot
grouped_bar_correct
ggplot(correct_prop, aes(x = plot, y = prop_correct, fill = phase)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.7), width = 0.6) +
scale_y_continuous(labels = scales::percent_format(), limits = c(0, 1)) +
scale_fill_manual(values = c("Pre_Learning" = "#E69F00", "Post_Learning" = "#0072B2")) +
labs(
title = "Interpretation Accuracy (Pre vs Post Learning) by plot",
x = "Plot",
y = "Accuracy(%)",
fill = "Phase"
) +
theme_bw(base_size = 12, base_family = "sans") +
theme(
panel.border = element_rect(colour = "black", size = 0.5),
legend.title = element_text(size = 11, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 10, face = "plain", angle = 20, hjust = 1),
axis.text.y = element_text(size = 10, face = "plain"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 14),
plot.caption = element_text(size = 9, hjust = 0),
legend.position = "top"
)
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
filtered_data <- correctness_long %>%
filter(knowledge_rate %in% input$selected_knowledge)
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
survey_data <- survey_data %>%
mutate(
pre_score = rowSums(across(ends_with("pre_km_code") |
ends_with("pre_survdiff_code") |
ends_with("pre_mrl_code") |
ends_with("pre_mr_ldiff_code"), ~ . == "CORRECT")),
post_score = rowSums(across(ends_with("post_km_code") |
ends_with("post_survdiff_code") |
ends_with("post_mrl_code") |
ends_with("post_mr_ldiff_code"), ~ . == "CORRECT")),
learning_gain = post_score - pre_score
)
# Filter for those with low knowledge rate (1 or 5)
low_knowledge_learners <- survey_data %>%
filter(knowledge_rate <= 5)
# Plot learning gain
ggplot(low_knowledge_learners, aes(x = factor(knowledge_rate), y = learning_gain)) +
geom_boxplot(fill = "lightgreen") +
labs(
title = "Learning Gain for Low-Knowledge Respondents",
x = "Self-rated Knowledge (Low)",
y = "Change in Accuracy (Post - Pre)"
) +
theme_bw(base_size = 12, base_family = "sans")+
theme(
panel.border = element_rect(colour = "black", size = 0.5),
plot.title = element_text(face = "bold", size = 14),
axis.title.x = element_text(size = 12, face = "plain"),
axis.text.x = element_text(size = 10),
axis.title.y = element_text(size = 12, face = "plain"),
axis.text.y = element_text(size = 10),
plot.caption = element_text(size = 9, hjust = 0)
)
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning) & !is.na(Post_Learning))  # Keep only complete pairs
# Alluvial diagram per plot
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.3) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Alluvial Diagram of Changes in Interpretation per Plot Type",
x = "Phase",
y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning) & !is.na(Post_Learning))  # Keep only complete pairs
# Alluvial diagram per plot
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.3) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Alluvial Diagram of Changes in Interpretation per Plot Type",
x = "Phase",
y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
runApp('C:/Users/user/Desktop/GitHUB/Msc_thesis_survival/Survey/Shiny_survey_analysis')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(readxl)
library(ggalluvial)
# Load and prepare data once at app start
survey_data <- read_csv("survey_data_shiny.csv")
# Prepare long-format data for plotting
correctness_long <- survey_data %>%
select(pre_km_code,pre_mrl_code,post_km_code,post_mrl_code,knowledge_rate) %>%
mutate(id = row_number()) %>%
pivot_longer(
cols = -c(id,knowledge_rate),
names_to = "plot_full",
values_to = "correctness"
) %>%
mutate(
phase = factor(
case_when(
str_detect(plot_full, "^pre_") ~ "Pre_Learning",
str_detect(plot_full, "^post_") ~ "Post_Learning"
),levels = c("Pre_Learning", "Post_Learning")
),
plot = case_when(
str_detect(plot_full, "km") ~ "Kaplan Meier(KM)",
str_detect(plot_full, "mrl") ~ "Mean Residual Life(MRL)"
),
correctness = factor(correctness, levels = c("INCORRECT", "CORRECT")))%>%
mutate(
knowledge_group = if_else(knowledge_rate < 5, "<5 (Low)", "≥5 (High)")
)
# Calculation of  accuracy per plot  and phase
correct_prop <- correctness_long %>%
group_by( plot, phase) %>%
summarise(prop_correct = mean(correctness == "CORRECT")) %>%
ungroup()
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning), !is.na(Post_Learning))
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.6) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Improvement in Accuracy (Pre vs Post)", x = "Phase", y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
library(tidyverse)
library(ggplot2)
library(readxl)
library(ggalluvial)
# Load and prepare data once at app start
survey_data <- read_csv("survey_data_shiny.csv")
# Prepare long-format data for plotting
correctness_long <- survey_data %>%
select(pre_km_code,pre_mrl_code,post_km_code,post_mrl_code,knowledge_rate) %>%
mutate(id = row_number()) %>%
pivot_longer(
cols = -c(id,knowledge_rate),
names_to = "plot_full",
values_to = "correctness"
) %>%
mutate(
phase = factor(
case_when(
str_detect(plot_full, "^pre_") ~ "Pre_Learning",
str_detect(plot_full, "^post_") ~ "Post_Learning"
),levels = c("Pre_Learning", "Post_Learning")
),
plot = case_when(
str_detect(plot_full, "km") ~ "Kaplan Meier(KM)",
str_detect(plot_full, "mrl") ~ "Mean Residual Life(MRL)"
),
correctness = factor(correctness, levels = c("INCORRECT", "CORRECT")))%>%
mutate(
knowledge_group = if_else(knowledge_rate < 5, "<5 (Low)", "≥5 (High)")
)  %>%
ungroup()
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning), !is.na(Post_Learning))
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.6) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Improvement in Accuracy (Pre vs Post)", x = "Phase", y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning), !is.na(Post_Learning))
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.6) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Improvement in Accuracy (Pre vs Post)", x = "Phase", y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
library(tidyverse)
library(ggplot2)
library(readxl)
library(ggalluvial)
# Load and prepare data once at app start
survey_data <- read_csv("survey_data_shiny.csv")
# Prepare long-format data for plotting
correctness_long <- survey_data %>%
select(pre_km_code,pre_mrl_code,post_km_code,post_mrl_code,knowledge_rate) %>%
mutate(id = row_number()) %>%
pivot_longer(
cols = -c(id,knowledge_rate),
names_to = "plot_full",
values_to = "correctness"
) %>%
mutate(
phase = factor(
case_when(
str_detect(plot_full, "^pre_") ~ "Pre_Learning",
str_detect(plot_full, "^post_") ~ "Post_Learning"
),levels = c("Pre_Learning", "Post_Learning")
),
plot = case_when(
str_detect(plot_full, "km") ~ "Kaplan Meier(KM)",
str_detect(plot_full, "mrl") ~ "Mean Residual Life(MRL)"
),
correctness = factor(correctness, levels = c("INCORRECT", "CORRECT")))%>%
mutate(
knowledge_group = if_else(knowledge_rate < 5, "<5 (Low)", "≥5 (High)")
)  %>%
ungroup()
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning), !is.na(Post_Learning))
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.6) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Improvement in Accuracy (Pre vs Post)", x = "Phase", y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
library(tidyverse)
library(ggplot2)
library(readxl)
library(ggalluvial)
# Load and prepare data once at app start
survey_data <- read_csv("survey_data_shiny.csv")
# Prepare long-format data for plotting
correctness_long <- survey_data %>%
select(pre_km_code,pre_mrl_code,post_km_code,post_mrl_code,knowledge_rate) %>%
mutate(id = row_number()) %>%
pivot_longer(
cols = -c(id,knowledge_rate),
names_to = "plot_full",
values_to = "correctness"
) %>%
mutate(
phase = factor(
case_when(
str_detect(plot_full, "^pre_") ~ "Pre_Learning",
str_detect(plot_full, "^post_") ~ "Post_Learning"
),levels = c("Pre_Learning", "Post_Learning")
),
plot = case_when(
str_detect(plot_full, "km") ~ "Kaplan Meier(KM)",
str_detect(plot_full, "mrl") ~ "Mean Residual Life(MRL)"
),
correctness = factor(correctness, levels = c("INCORRECT", "CORRECT"))) %>%
ungroup()
alluvial_data <- correctness_long %>%
select(id, plot, phase, correctness) %>%
pivot_wider(names_from = phase, values_from = correctness) %>%
filter(!is.na(Pre_Learning), !is.na(Post_Learning))
ggplot(alluvial_data,
aes(axis1 = Pre_Learning, axis2 = Post_Learning, y = 1)) +
geom_alluvium(aes(fill = Pre_Learning), width = 0.3) +
geom_stratum(width = 0.3, fill = "gray80", color = "black") +
geom_text(stat = "stratum", aes(label = after_stat(stratum)), size = 2.6) +
scale_x_discrete(limits = c("Pre_Learning", "Post_Learning"), expand = c(0.1, 0.1)) +
facet_wrap(~plot) +
labs(title = "Improvement in Accuracy (Pre vs Post)", x = "Phase", y = "Number of Respondents") +
theme_minimal() +
theme(
axis.text.x = element_text(size = 8, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
plot.title = element_text(face = "bold", size = 16),
strip.text = element_text(size = 12, face = "bold")
)
setwd("D:/Side H/Galway Hospital/abp_waveforms")
usethis::use_directory("dev")
# 0) Tools you’ll need on this machine
install.packages(c(
"usethis","devtools","roxygen2","testthat","Rcpp",
"signal","zoo","pkgdown","covr","lintr",
"tibble","dplyr","ggplot2","tidyr"
))
# 1) Turn the cloned repo into a proper R package
usethis::create_package(".")   # creates DESCRIPTION, NAMESPACE scaffolding, R/, man/, etc.
usethis::use_github(protocol = "https", private = FALSE)
source("dev/01-init-package.R")
wd
getwd()
source("dev/01-init-package.R")
source("dev/01-init-package.R")
getwd()
source("dev/01-init-package.R")
getwd()                       # must be your repo root
usethis::proj_sitrep()        # prints the active project path & git status
