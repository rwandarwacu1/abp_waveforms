// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// BP_resample
List BP_resample(NumericVector waveform, double origFs);
RcppExport SEXP _abpwaveforms_BP_resample(SEXP waveformSEXP, SEXP origFsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type waveform(waveformSEXP);
    Rcpp::traits::input_parameter< double >::type origFs(origFsSEXP);
    rcpp_result_gen = Rcpp::wrap(BP_resample(waveform, origFs));
    return rcpp_result_gen;
END_RCPP
}
// BP_lowpass
NumericVector BP_lowpass(NumericVector x);
RcppExport SEXP _abpwaveforms_BP_lowpass(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(BP_lowpass(x));
    return rcpp_result_gen;
END_RCPP
}
// doubleDerive
List doubleDerive(NumericVector waveform);
RcppExport SEXP _abpwaveforms_doubleDerive(SEXP waveformSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type waveform(waveformSEXP);
    rcpp_result_gen = Rcpp::wrap(doubleDerive(waveform));
    return rcpp_result_gen;
END_RCPP
}
// getFootIndex
IntegerVector getFootIndex(NumericVector waveformDDPlus, LogicalVector zoneOfInterest);
RcppExport SEXP _abpwaveforms_getFootIndex(SEXP waveformDDPlusSEXP, SEXP zoneOfInterestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type waveformDDPlus(waveformDDPlusSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type zoneOfInterest(zoneOfInterestSEXP);
    rcpp_result_gen = Rcpp::wrap(getFootIndex(waveformDDPlus, zoneOfInterest));
    return rcpp_result_gen;
END_RCPP
}
// FixIndex
IntegerVector FixIndex(IntegerVector footIndex, double fs, double minIntervalSec, double maxIntervalSec);
RcppExport SEXP _abpwaveforms_FixIndex(SEXP footIndexSEXP, SEXP fsSEXP, SEXP minIntervalSecSEXP, SEXP maxIntervalSecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type footIndex(footIndexSEXP);
    Rcpp::traits::input_parameter< double >::type fs(fsSEXP);
    Rcpp::traits::input_parameter< double >::type minIntervalSec(minIntervalSecSEXP);
    Rcpp::traits::input_parameter< double >::type maxIntervalSec(maxIntervalSecSEXP);
    rcpp_result_gen = Rcpp::wrap(FixIndex(footIndex, fs, minIntervalSec, maxIntervalSec));
    return rcpp_result_gen;
END_RCPP
}
// getPeakIndex
IntegerVector getPeakIndex(NumericVector waveform, IntegerVector footIndex);
RcppExport SEXP _abpwaveforms_getPeakIndex(SEXP waveformSEXP, SEXP footIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type waveform(waveformSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type footIndex(footIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(getPeakIndex(waveform, footIndex));
    return rcpp_result_gen;
END_RCPP
}
// computeSUT_PA
DataFrame computeSUT_PA(NumericVector waveform, IntegerVector foot, IntegerVector peak, double fs);
RcppExport SEXP _abpwaveforms_computeSUT_PA(SEXP waveformSEXP, SEXP footSEXP, SEXP peakSEXP, SEXP fsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type waveform(waveformSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type foot(footSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type peak(peakSEXP);
    Rcpp::traits::input_parameter< double >::type fs(fsSEXP);
    rcpp_result_gen = Rcpp::wrap(computeSUT_PA(waveform, foot, peak, fs));
    return rcpp_result_gen;
END_RCPP
}
// getDicroticNotchAndPeak
DataFrame getDicroticNotchAndPeak(NumericVector signal, IntegerVector foot, IntegerVector peak, double fs);
RcppExport SEXP _abpwaveforms_getDicroticNotchAndPeak(SEXP signalSEXP, SEXP footSEXP, SEXP peakSEXP, SEXP fsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type signal(signalSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type foot(footSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type peak(peakSEXP);
    Rcpp::traits::input_parameter< double >::type fs(fsSEXP);
    rcpp_result_gen = Rcpp::wrap(getDicroticNotchAndPeak(signal, foot, peak, fs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_abpwaveforms_BP_resample", (DL_FUNC) &_abpwaveforms_BP_resample, 2},
    {"_abpwaveforms_BP_lowpass", (DL_FUNC) &_abpwaveforms_BP_lowpass, 1},
    {"_abpwaveforms_doubleDerive", (DL_FUNC) &_abpwaveforms_doubleDerive, 1},
    {"_abpwaveforms_getFootIndex", (DL_FUNC) &_abpwaveforms_getFootIndex, 2},
    {"_abpwaveforms_FixIndex", (DL_FUNC) &_abpwaveforms_FixIndex, 4},
    {"_abpwaveforms_getPeakIndex", (DL_FUNC) &_abpwaveforms_getPeakIndex, 2},
    {"_abpwaveforms_computeSUT_PA", (DL_FUNC) &_abpwaveforms_computeSUT_PA, 4},
    {"_abpwaveforms_getDicroticNotchAndPeak", (DL_FUNC) &_abpwaveforms_getDicroticNotchAndPeak, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_abpwaveforms(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
